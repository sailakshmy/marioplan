{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","components/projects/CreateProject.js","store/actions/projectActions.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","profile","initials","SignedOutLinks","state","console","log","firebase","links","uid","isLoaded","Notifications","notifications","map","notification","key","id","user","content","moment","time","toDate","fromNow","ProjectSummary","project","title","authorFirstName","authorLastName","createdAt","calendar","ProjectList","projects","Dashboard","this","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","resp","doc","set","CreateProject","createProject","history","push","authorId","add","Date","App","exact","path","component","ProjectDetails","Boolean","window","location","hostname","initState","authReducer","action","message","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","fbConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","analytics","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","attachAuthIsReady","firebaseStateName","rrfProps","config","userProfile","useFirestoreForProfile","enableRedirectHandling","resetBeforeLogin","createFirestoreInstance","AuthIsLoaded","children","useSelector","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.f299694f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {signOut} from '../../store/actions/authActions';\r\n\r\nconst SignedInLinks = (props) => {/**This is functional component, so we have to take the props as \r\n    a parameter, unlike the other components where we were directly accessing the this.props inside the \r\n    component. We will attach an onClick event to the log out button. Remove the Nav Link tag from \r\n    that and make it an anchor tag. This we are doing, because we don't have to navigate to anywhere else*/\r\n    \r\n    return(\r\n        <ul className=\"right\">\r\n            <li><NavLink to = '/create'>New Project </NavLink></li>\r\n            <li><a onClick= {props.signOut}>Log Out</a></li>\r\n    <li><NavLink to = '/' className='btn btn-floating pink lighten-1'>{props.profile.initials}</NavLink></li>\r\n        </ul>\r\n    )\r\n}\r\nconst mapDispatchToProps= (dispatch)=>{\r\n    return{\r\n        signOut: ()=> dispatch(signOut()) \r\n    }\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(SignedInLinks);","//import firebase from '../../config/fbConfig';\r\n\r\n\r\nexport const signIn = (credentials) => {\r\n    return (dispatch, getState,{getFirebase}) => {// We can do this because of thunk..Done in the same way as projectActions.js\r\n        //1.Initialise the firebase instance\r\n        const firebase = getFirebase(); \r\n        //2.Communicate with the project and sign the user in using firebase\r\n        /**If the email and password are correct, we are going to successfully sign the user in to the\r\n        firebase Application and will send us a response. This response could take some time and that makes\r\n        this a promise that will handle an async call. */\r\n        firebase.auth().signInWithEmailAndPassword(credentials.email,credentials.password) \r\n        .then(()=>{\r\n            dispatch({type:'LOGIN_SUCCESS'});\r\n        })\r\n        .catch((err)=>{\r\n            dispatch({type:'LOGIN_FAILED', err});\r\n        })\r\n    }\r\n}\r\n\r\nexport const signOut = () =>{\r\n    return (dispatch, getState, {getFirebase}) => {\r\n        const firebase = getFirebase();\r\n        firebase.auth().signOut()\r\n        .then(()=>{\r\n            dispatch({type:'SIGNOUT_SUCCESS'});\r\n        });\r\n    }\r\n}\r\n\r\nexport const signUp = (newUser) => {\r\n\r\n    return (dispatch,getState, {getFirebase,getFirestore})=>{\r\n        /**Here we need firebase and firestore because\r\n         * getFirebase = to sign up the new user using the authentication service by Firebase\r\n         * getFirestore = to communicate with the Firestore db\r\n         */\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n\r\n        //Interact with Firebase auth and generate the new user \r\n        firebase.auth().createUserWithEmailAndPassword(\r\n            newUser.email,\r\n            newUser.password\r\n        ).then((resp)=>{ //This response will contain information about the user that we have just signed up\r\n            /*It doesn't matter if the users collection doesn't exist yet. Firestore will create it otherwise\r\n            Since we want to link the document using the firebase auth generated UID, we will use the .doc()\r\n            instead of the .add() method */\r\n            return firestore.collection('users').doc(resp.user.uid).set({\r\n                firstName : newUser.firstName,\r\n                lastName : newUser.lastName,\r\n                initials : newUser.firstName[0] + newUser.lastName[0]\r\n            })\r\n        })//This will also return a promise, so use another then() to dispatch an action\r\n        .then(()=>{\r\n            dispatch({type:'SIGNUP_SUCCESS'})\r\n        }).catch((err) => {\r\n            dispatch({type:'SIGNUP_FAILED', err})\r\n        })\r\n\r\n\r\n    }\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst SignedOutLinks = () => {\r\n    return(\r\n        <ul className=\"right\">\r\n            <li><NavLink to = '/signup'>Sign Up </NavLink></li>\r\n            <li><NavLink to = '/signin'>Log In</NavLink></li>\r\n            \r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default SignedOutLinks;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport SignedInLinks from './SignedInLinks';\r\nimport SignedOutLinks from './SignedOutLinks';\r\nimport {connect} from  'react-redux';// To connect to the redux state\r\n\r\n\r\nconst Navbar = (props) => {\r\n    const {auth, profile} = props;\r\n    //console.log(auth); \r\n    const links = auth.uid ? <SignedInLinks profile={profile}/> : <SignedOutLinks/>\r\n    return(\r\n    <nav className=\"nav-wrapper grey darken-3\">\r\n        <div className=\"container\">\r\n            <Link to ='/' className='brand-logo'>Mario Plan</Link>\r\n            {auth.isLoaded && links}\r\n        </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\nconst mapStateToProps= (state)=>{ // To access the auth state in the props\r\n    console.log(state);\r\n    return {\r\n        auth : state.firebase.auth,\r\n        profile : state.firebase.profile\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar);","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst Notifications = (props)=>{\r\n    const {notifications} = props;\r\n    return(\r\n        <div className=\"section\">\r\n            <div className=\"card z-depth-0\">\r\n                <div className=\"card-content\">\r\n                    <span className=\"card-title\">Notifications</span>\r\n                    <ul className=\"notifications\">\r\n                        {notifications && notifications.map(notification =>{\r\n                            return(\r\n                            <li key={notification.id}>\r\n                                <span className=\"pink-text\">{notification.user} </span>\r\n                                <span>{notification.content}</span>\r\n                                <div className=\"grey-text note-date\">\r\n                                    {moment(notification.time.toDate()).fromNow()}\r\n                                </div>\r\n                            </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notifications;","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst ProjectSummary = ({project}) => {\r\n    return(\r\n        <div className=\"card z-depth-0 project-summary\">\r\n            <div className=\"card-content grey-text text-darken-3\">\r\n                <span className=\"card-title\">{project.title}</span>\r\n                <p>Posted by {project.authorFirstName} {project.authorLastName}</p>\r\n                <p className=\"grey-text\">{moment(project.createdAt.toDate()).calendar()}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectSummary;","import React from 'react';\r\nimport ProjectSummary from './ProjectSummary';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst ProjectList = (props)=>{\r\n    //console.log(props);\r\n    const {projects} = props;\r\n    return(\r\n        <div className=\"project-list section\">\r\n            { projects && projects.map(project =>{ /**We first check if projects property exists or not */\r\n                return(\r\n                    <Link  to={'/projects/' + project.id}  key={project.id} >\r\n                        <ProjectSummary project={project} />\r\n                    </Link>\r\n                )\r\n            })}  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectList;","import React, {Component} from 'react';\r\nimport Notifications from './Notifications';\r\nimport ProjectList from '../projects/ProjectList';\r\nimport {connect} from 'react-redux';\r\nimport {firestoreConnect} from 'react-redux-firebase';\r\nimport {compose} from 'redux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nclass Dashboard extends Component{\r\n    render(){\r\n        //console.log(this.props);\r\n        const {projects, auth, notifications} = this.props;\r\n        if(!auth.uid) \r\n            return <Redirect to='/signin' />\r\n        return(\r\n            <div className=\"dashboard container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12 m6\">\r\n                        <ProjectList projects={projects}/>\r\n                    </div>\r\n                    <div className=\"col s12 m5 offset-m1\">\r\n                        <Notifications notifications={notifications}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state)=>{\r\n    //console.log(state);\r\n    return{\r\n        /* This is before the firestore DB was connected\r\n        projects: state.project.projects /*This will access the state of the rootReducer which has a \r\n        property project. This project property inturn points to the projects property of the projectReducer \r\n        */\r\n       //After the firestore DB is connected\r\n       projects: state.firestore.ordered.projects, /**This will access the state of the rootReducer, which\r\n       has a property firestore. This firestore property points to the firestoreReducer.(This firestoreReducer \r\n       will automatically sync up the with the data in the DB). In the firestore property, we have an ordered\r\n       property, which is an object with the property projects. We pass this to our property projects, which\r\n       will be passed as props to the ProjectList component*/\r\n       auth : state.firebase.auth,\r\n       notifications: state.firestore.ordered.notifications\r\n  }\r\n\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        {collection:'projects', orderBy: ['createdAt','desc']},\r\n        {collection: 'notifications', limit : 3,orderBy: ['time','desc']}\r\n    ])\r\n)(Dashboard);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {firestoreConnect} from 'react-redux-firebase';\r\nimport {compose} from 'redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nfunction ProjectDetails(props) {\r\n    //const id = props.match.params.id;\r\n    //console.log(props);\r\n    const {project, auth} = props;\r\n    if(!auth.uid)\r\n        return <Redirect to = '/signin' />\r\n    if(project){\r\n        return(\r\n        <div className=\"container section project-details\">\r\n            <div className=\"card z-depth-0\">\r\n                 <div className=\"card-content\">\r\n                    <span className=\"card-title\">{project.title}</span>\r\n                    <p>{project.content}</p>\r\n                  </div>\r\n            <div className=\"card-action grey lighten-3 grey-text\">\r\n            <div>Posted by {project.authorFirstName} {project.authorLastName}</div>\r\n                <div>{moment(project.createdAt.toDate()).calendar()}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n        )\r\n    } else {\r\n  return (\r\n    <div className=\"container center\">\r\n        <p>Loading Project...</p>\r\n    </div>\r\n  )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps= (state, ownProps)=>{\r\n    //console.log(state);\r\n    const id = ownProps.match.params.id;\r\n    const projects = state.firestore.data.projects;\r\n    const project = projects ? projects[id]:null;\r\n    return {//This object represents what we want to attach to the props\r\n        project: project,\r\n        auth: state.firebase.auth\r\n         \r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        {collection:'projects'}\r\n    ])\r\n\r\n)(ProjectDetails);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {signIn} from '../../store/actions/authActions';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nclass SignIn extends Component {\r\n    state = {\r\n        email:'',\r\n        password:''\r\n    }\r\n\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.id]:e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n       // console.log(this.props);\r\n        this.props.signIn(this.state); \r\n    }\r\n  render() {\r\n      const {authError, auth} = this.props;\r\n      if(auth.uid)\r\n      return <Redirect to='/' />\r\n    return (\r\n      <div className = 'container'>\r\n        <form onSubmit={this.handleSubmit} className=\"white\">\r\n            <h5 className=\"grey-text text-darken-3\">Sign In</h5>\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input type=\"email\" id='email' onChange={this.handleChange}/>\r\n            </div>\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" id='password' onChange={this.handleChange}/>\r\n            </div> \r\n            <div className=\"input-field\">\r\n                <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\r\n                <div className=\"red-text center\">\r\n                    {authError ? <p>{authError}</p>: null}\r\n                </div>\r\n            </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch)=>{/*Done so that we can make a dispatch from this component and call the \r\n signIn method from the actionCreator */\r\n return{\r\n     signIn: (creds) => dispatch(signIn(creds))\r\n }\r\n}\r\n\r\nconst mapStateToProps = (state)=>{\r\n    return{\r\n        authError: state.auth.authError, // This wil allow us to access the authError property in this component\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);\r\n","import React, { Component } from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {signUp} from '../../store/actions/authActions';\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        email:'',\r\n        password:'',\r\n        firstName:'',\r\n        lastName:''\r\n    }\r\n\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.id]:e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        //console.log(this.state);\r\n        this.props.signUp(this.state);\r\n    }\r\n  render() {\r\n      const {auth, authError} = this.props;\r\n      if(auth.uid)\r\n        return <Redirect to='/' />\r\n    return (\r\n      <div className = 'container'>\r\n        <form onSubmit={this.handleSubmit} className=\"white\">\r\n            <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"firstName\">First Name</label>\r\n                <input type=\"text\" id='firstName' onChange={this.handleChange}/>\r\n            </div>\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"lastName\">Last Name</label>\r\n                <input type=\"text\" id='lastName' onChange={this.handleChange}/>\r\n            </div>\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input type=\"email\" id='email' onChange={this.handleChange}/>\r\n            </div>\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" id='password' onChange={this.handleChange}/>\r\n            </div> \r\n            <div className=\"input-field\">\r\n                <button className=\"btn pink lighten-1 z-depth-0\">Sign Up</button>\r\n            </div>\r\n            <div className=\"red-text center\">\r\n                {authError ? <p>{authError}</p> : null}\r\n            </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth,\r\n        authError : state.auth.authError // This is to inform the user if sign up is not successful\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        signUp : (newUser) => dispatch(signUp(newUser))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {createProject} from '../../store/actions/projectActions';\r\nimport {Redirect} from'react-router-dom';\r\n\r\nclass CreateProject extends Component {\r\n    state = {\r\n        title:'',\r\n        content:''\r\n    }\r\n\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.id]:e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        //console.log(this.state);\r\n        this.props.createProject(this.state);/**Since we have mapped the dispatch function to the props,\r\n        we have access to the createProject function. We pass the this.state to this function. this.state\r\n        has the details of the newly created project. Now, we pass this to the createProject function */\r\n        this.props.history.push('/'); /*This is to redirect the user to the dashboard after a project has\r\n        been created successfully */\r\n\r\n    }\r\n  render() {\r\n      const { auth } = this.props;\r\n      if( !auth.uid )\r\n        return <Redirect to ='/signin'/>\r\n    return (\r\n      <div className = 'container'>\r\n        <form onSubmit={this.handleSubmit} className=\"white\">\r\n            <h5 className=\"grey-text text-darken-3\">Create Project</h5>\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"title\">Project Title</label>\r\n                <input type=\"text\" id='title' onChange={this.handleChange}/>\r\n            </div>\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"content\">Project Description</label>\r\n                <textarea  id=\"content\" className=\"materialize-textarea\" onChange={this.handleChange}></textarea>\r\n            </div> \r\n            <div className=\"input-field\">\r\n                <button className=\"btn pink lighten-1 z-depth-0\">Create Project</button>\r\n            </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state)=>{\r\n    return{\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        createProject: (project) => dispatch(createProject(project)) /**Here we get the newly created\r\n        project details and we dispatch the details to the createProject action creator. */\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CreateProject);/*The first parameter to the connect Function\r\nshould always be mapStateToProps. Since we don't have that here, we use mapDispatchToProps */\r\n","//import {reactReduxFirebase} from 'react-redux-firebase'; \r\n\r\n\r\nexport const createProject = (project)=>{/**Here we take in the newly created project details and return\r\n    another function */\r\n    return (dispatch, getState, {getFirebase, getFirestore}) =>{ /**Here we take in the dispatch and\r\n        the state of the store as well as the \r\n        At some point, we can take the project and add it to a db and then dispatch the actual action\r\n        after the Async call has been completed\r\n         */\r\n        //make async call to DB over here\r\n        const firestore = getFirestore();\r\n        const profile = getState().firebase.profile;\r\n        const authorId = getState().firebase.auth.uid;\r\n        firestore.collection('projects').add({\r\n            ...project,\r\n            authorFirstName : profile.firstName,\r\n            authorLastName: profile.lastName,\r\n            authorId: authorId,\r\n            createdAt: new Date()\r\n        }).then (()=>{\r\n            dispatch({type:'CREATE_PROJECT', project: project});\r\n        }).catch((e)=> {\r\n            dispatch({type:'CREATE_PROJECT_ERROR', e})\r\n        })\r\n        \r\n    }\r\n};","import React, { Component } from 'react';\nimport {BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Dashboard from './components/dashboard/Dashboard';\nimport ProjectDetails from './components/projects/ProjectDetails';\nimport SignIn from './components/auth/SignIn';\nimport SignUp from './components/auth/SignUp';\nimport CreateProject from './components/projects/CreateProject';\n\nclass App extends Component{\n  render(){\n  return (\n    <BrowserRouter >\n        <div className=\"App\">\n           <Navbar />\n           <Switch>\n             <Route exact path='/' component = {Dashboard} />\n             <Route path='/projects/:id' component = {ProjectDetails} />\n             <Route path='/signin' component={SignIn} />\n             <Route path='/signup' component={SignUp} />\n             <Route path='/create' component={CreateProject} />\n\n           </Switch>\n        </div>\n    </BrowserRouter>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState={\r\n    authError : null\r\n}\r\nconst authReducer = (state= initState,action) =>{\r\n    switch(action.type){\r\n\r\n        case 'LOGIN_FAILED':\r\n            console.log('Login Failed');\r\n            return {\r\n                ...state, \r\n                authError: 'Login failed'\r\n            }\r\n\r\n        case 'LOGIN_SUCCESS':\r\n            console.log('Login successful');\r\n            return {\r\n                ...state,\r\n                authError: null\r\n            }\r\n\r\n        case 'SIGNOUT_SUCCESS':\r\n            console.log('Signout successful');\r\n            return state;\r\n\r\n        case 'SIGNUP_SUCCESS':\r\n            console.log('Sign up Successful');\r\n            return{\r\n                ...state,\r\n                authError: null\r\n            }\r\n        \r\n        case 'SIGNUP_FAILED':\r\n            console.log('Sign up failed');\r\n            return {\r\n                ...state,\r\n                authError: action.err.message\r\n            }\r\n        default:\r\n            return state;\r\n            \r\n    }\r\n}\r\n\r\nexport default authReducer;","const initState={\r\n    projects:[\r\n        {id:'1',title:'title1',content:'content1'},\r\n        {id:'2',title:'title2',content:'content2'},\r\n        {id:'3',title:'title3',content:'content3'}\r\n        \r\n    ]\r\n\r\n}\r\nconst projectReducer = (state= initState,action) =>{\r\n    switch(action.type){\r\n        case 'CREATE_PROJECT':\r\n            console.log('Created project ', action.project);\r\n            return state;\r\n        case 'CREATE_PROJECT_ERROR':\r\n            console.log('Running into error ', action.e);\r\n            return state;\r\n        default: \r\n            return state;\r\n         \r\n    }\r\n    \r\n}\r\n\r\nexport default projectReducer;","import authReducer from './authReducer';\r\nimport projectReducer from './projectReducer';\r\nimport {combineReducers} from 'redux';\r\nimport {firestoreReducer} from 'redux-firestore';//to sync the firestore data with redux's state in background\r\nimport {firebaseReducer} from 'react-redux-firebase';//to sync the firebase data(including authentication) service with the redux's state\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    project: projectReducer,\r\n    firestore: firestoreReducer,\r\n    firebase: firebaseReducer\r\n});\r\n\r\nexport default rootReducer;","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/analytics';\r\nimport 'firebase/auth';\r\n\r\n export const fbConfig = {\r\n     apiKey: \"AIzaSyAl7xCV9_JYDQ49Ka3uRLQznbkx-6KFJVg\",\r\n    authDomain: \"marioplan-6cbb1.firebaseapp.com\",\r\n    databaseURL: \"https://marioplan-6cbb1.firebaseio.com\",\r\n    projectId: \"marioplan-6cbb1\",\r\n    storageBucket: \"marioplan-6cbb1.appspot.com\",\r\n    messagingSenderId: \"535239777655\",\r\n    appId: \"1:535239777655:web:2defb72e4ef922b0595572\",\r\n    measurementId: \"G-ZC7BM8L5HB\"\r\n  };\r\n  \r\n // Initialize Firebase\r\nfirebase.initializeApp(fbConfig);\r\nfirebase.analytics();\r\nfirebase.firestore();\r\n\r\n\r\n\r\n  export default firebase;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport {Provider, useSelector} from 'react-redux';\nimport thunk from'redux-thunk';\nimport {reduxFirestore, getFirestore, createFirestoreInstance} from 'redux-firestore';\nimport {ReactReduxFirebaseProvider, getFirebase, isLoaded} from 'react-redux-firebase'; \nimport firebase,{fbConfig} from './config/fbConfig';\n\nconst store = createStore(rootReducer,\n  compose(\n  applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\n  reduxFirestore(firebase, fbConfig, {\n   /* useFirestoreForProfile:true,// This is to inform firebase reducer that we want to connect to firestore db\n    userProfile : 'users', /*informing the reducer that this is the collections that has to be synced\n    with the profile object in the state */\n    attachAuthIsReady: true,\n    firebaseStateName: 'firebaseReducer'\n    })\n    //reactReduxFirebase(fbConfig)\n   )\n);\n\nconst rrfConfig = {\n  userProfile: 'users',/*informing the reducer that this is the collections that has to be synced\n  with the profile object in the state */\n  useFirestoreForProfile : true,//This is to inform firebase reducer that we want to connect to firestore db\n  enableRedirectHandling : false,\n  resetBeforeLogin: false\n}\nconst rrfProps = {\n  firebase: firebase,\n  config: fbConfig,\n  config : rrfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance,\n  userProfile: 'users',//where the profiles are stored in DB\n  presence: 'presence',//where the list of online users is stored in the DB\n  sessions:'sessions'\n}\n\nfunction AuthIsLoaded({children}){\n  const auth = useSelector(state => state.firebase.auth);\n  if(!isLoaded(auth))\n    return <div>Loading Screen...</div>\n  return children;\n}\n\n//store.firebaseAuthIsReady.then(()=>{\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store= {store}> \n      <ReactReduxFirebaseProvider {...rrfProps}>\n        <AuthIsLoaded>\n      <App />\n      </AuthIsLoaded>\n      </ReactReduxFirebaseProvider>\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n//})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}